// sum
global proc float addArray(float $input[]) {
    float $total = 0;
    for ($i = 0; $i < size($input); $i++) {
        $total += $input[$i];
    }
    return $total;
}

// difference (left to right)
global proc float subtractArray(float $input[]) {
    float $result = $input[0];
    for ($i = 1; $i < size($input); $i++) {
        $result -= $input[$i];
    }
    return $result;
}

// multiplication
global proc float multiplyArray(float $input[]) {
    float $result = 1;
    for ($i = 0; $i < size($input); $i++) {
        $result *= $input[$i];
    }
    return $result;
}

// division (left to right)
global proc float divideArray(float $input[]) {
    float $result = $input[0];
    for ($i = 1; $i < size($input); $i++) {
        if ($input[$i] != 0) {
            $result /= $input[$i];
        } else {
            warning("Division by zero skipped.\n");
        }
    }
    return $result;
}

// power
global proc float power(float $x, int $n) {
    float $result = 1;
    for ($i = 0; $i < $n; $i++) {
        $result *= $x;
    }
    return $result;
}

// mean
global proc float meanArray(float $input[]) {
    return (addArray($input) / size($input));
}

// median
global proc float medianArray(float $input[]) {
    float $sorted[] = sort($input); // MEL has sort()
    int $len = size($sorted);
    if ($len % 2 == 1) {
        return $sorted[ ($len-1)/2 ];
    } else {
        return ( $sorted[$len/2 - 1] + $sorted[$len/2] ) / 2.0;
    }
}
